generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  imageUrl String @db.Text
  email    String @db.Text

  communities  Community[]
  members  Member[]
  branches Branch[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Community {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members  Member[]
  branches Branch[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  communityId String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  // messages Message[]
  // directMessages DirectMessage[]

  // conversationsInitiated Conversation[] @relation("MemberOne")
  // conversationsReceived Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([communityId])
}

enum BrachType {
  TEXT
  AUDIO
  VIDEO
}

model Branch {
  id   String    @id @default(uuid())
  name String
  type BrachType @default(TEXT)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  communityId  String
  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  // messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([communityId])
}
